import pandas as pd
import numpy as np
import h5py
from plinkio import plinkfile
import argparse

'''
1. load ref snp set (generated by merge_input_ss_ukb.py)
2. load plink genotype data
3. extract snps
'''

def _parse_plink_snps_(genotype_file, snp_indices):
    plinkf = plinkfile.PlinkFile(genotype_file)
    samples = plinkf.get_samples()
    num_individs = len(samples)
    num_snps = len(snp_indices)
    raw_snps = np.empty((num_snps,num_individs),dtype='int8')
    #If these indices are not in order then we place them in the right place while parsing SNPs.
    snp_order = np.argsort(snp_indices)
    ordered_snp_indices = list(snp_indices[snp_order])
    ordered_snp_indices.reverse()
    #print 'Iterating over file to load SNPs'
    snp_i = 0
    next_i = ordered_snp_indices.pop()
    line_i = 0
    max_i = ordered_snp_indices[0]
    while line_i <= max_i:
        if line_i < next_i:
            plinkf.next()
        elif line_i==next_i:
            line = plinkf.next()
            snp = np.array(line, dtype='int8')
            bin_counts = line.allele_counts()
            if bin_counts[-1]>0:
                mode_v = np.argmax(bin_counts[:2])
                snp[snp==3] = mode_v
            s_i = snp_order[snp_i]
            raw_snps[s_i]=snp
            if line_i < max_i:
                next_i = ordered_snp_indices.pop()
            snp_i+=1
        line_i +=1
    plinkf.close()
    assert snp_i==len(raw_snps), 'Failed to parse SNPs?'
    num_indivs = len(raw_snps[0])
    freqs = np.sum(raw_snps,1, dtype='float32')/(2*float(num_indivs))
    return raw_snps, freqs

def parse_indiv_genotype(genotype_file, ref_path, hdf5_file):
    plinkf = plinkfile.PlinkFile(genotype_file)
    samples = plinkf.get_samples()
    num_individs = len(samples)
    Y = [s.phenotype for s in samples]
    fids = [s.fid for s in samples]
    iids = [s.iid for s in samples]
    unique_phens = np.unique(Y)
    if len(unique_phens)==1:
        print 'Unable to find phenotype values.'
        has_phenotype=False
    elif len(unique_phens)==2:
        cc_bins = np.bincount(Y)
        assert len(cc_bins)==2, 'Problems with loading phenotype'
        print 'Loaded %d controls and %d cases'%(cc_bins[0], cc_bins[1])
        has_phenotype=True
    else:
        print 'Found quantitative phenotype values'
        has_phenotype=True

    ref = pd.read_table(ref_path)
    chrom_list = np.unique(ref['CHROM'])
    hf = h5py.File(hdf5_file,'w')
    if has_phenotype:
        hf.create_dataset('y', data=Y)
    hf.create_dataset('fids', data=fids)
    hf.create_dataset('iids', data=iids)
    hf.create_dataset('M', data=[ref.shape[0]])
    for k in chrom_list:
        chunk = ref[ref['CHROM']==k]
        snp_indices = np.array(chunk['cord_bim'].tolist())
        print 'Extracting genotypes of chromosomes %d from genotype_file'%k
        raw_snps, freqs = _parse_plink_snps_(genotype_file, snp_indices)
        print 'raw_snps.shape=', raw_snps.shape
        snp_stds = np.sqrt(2*freqs*(1-freqs)) #np.std(raw_snps, 1) 
        snp_means = freqs*2 #np.mean(raw_snps, 1)
        g = hf.create_group('chrom_%d' % k)
        #Check SNP frequencies.. or filter by MAF: to be continued...
        print 'Writing genotypes of chromosomes %d to hdf5_file'%k
        g.create_dataset('raw_snps', data=raw_snps, compression='lzf')
        g.create_dataset('snp_stds', data=snp_stds)
        g.create_dataset('snp_means', data=snp_means)
        g.create_dataset('freqs', data=freqs)
        g.create_dataset('positions', data=chunk['POS'].tolist())
        g.create_dataset('alleles', data=zip(chunk['A1'].tolist(), chunk['A2'].tolist()))
        g.create_dataset('SNP', data=chunk['SNP'].tolist())
        hf.flush()
    hf.close()
    print 'individual-level data hdf5 written to %s!'%hdf5_file

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Parse genotype data!')
    parser.add_argument('--genotype_file', required=True)
    parser.add_argument('--ref_path', required=True)
    parser.add_argument('--hdf5_file', required=True)
    args = parser.parse_args()
    parse_indiv_genotype(args.genotype_file, args.ref_path, args.hdf5_file)
'''
genotype_file='/gpfs/loomis/project/fas/zhao/yh367/EsmlPred/Data/test/ATH/phs000788/eur_ath_gr_removed_mapped'
genotype_file='/gpfs/loomis/project/fas/zhao/yh367/EsmlPred/Data/test/ATH/phs000788/eur_ath_gr_removed_mapped'
ref_path='/gpfs/loomis/project/fas/zhao/yh367/EsmlPred/temp/keep_flip.list'
hdf5_file='/gpfs/loomis/project/fas/zhao/yh367/EsmlPred/temp/'
python parse_indiv.py \
 --genotype_file /gpfs/loomis/project/fas/zhao/yh367/EsmlPred/Data/test/ATH/phs000788/eur_ath_gr_removed_mapped \
 --ref_path /gpfs/loomis/project/fas/zhao/yh367/EsmlPred/temp/keep_flip.list \
 --hdf5_file /gpfs/loomis/project/fas/zhao/yh367/EsmlPred/temp/gt.h5py
'''
